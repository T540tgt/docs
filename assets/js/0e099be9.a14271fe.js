"use strict";(self.webpackChunkdocs_oasis_io=self.webpackChunkdocs_oasis_io||[]).push([[192],{802:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=s(4848),t=s(8453);const a={},r="DAO Contract",i={id:"dapp/opl/host",title:"DAO Contract",description:"Let's start with a smart contract that describes a basic DAO, DAOV1.sol, with a",source:"@site/docs/dapp/opl/host.md",sourceDirName:"dapp/opl",slug:"/dapp/opl/host",permalink:"/dapp/opl/host",draft:!1,unlisted:!1,editUrl:"https://github.com/oasisprotocol/docs/edit/main/docs/dapp/opl/host.md",tags:[],version:"current",lastUpdatedAt:1723018842e3,frontMatter:{},sidebar:"developers",previous:{title:"Setup",permalink:"/dapp/opl/setup"},next:{title:"Ballot Contract",permalink:"/dapp/opl/enclave"}},l={},c=[{value:"Base Contract",id:"base-contract",level:2},{value:"What is different with OPL?",id:"what-is-different-with-opl",level:2},{value:"How does OPL do this?",id:"how-does-opl-do-this",level:3},{value:"Endpoints? Why not Solidity events?",id:"endpoints-why-not-solidity-events",level:3},{value:"Let&#39;s see the code",id:"lets-see-the-code",level:3},{value:"Host",id:"host",level:4},{value:"Constructor",id:"constructor",level:4}];function p(e){const o={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h1,{id:"dao-contract",children:"DAO Contract"}),"\n",(0,n.jsxs)(o.p,{children:["Let's start with a smart contract that describes a basic DAO, ",(0,n.jsx)(o.code,{children:"DAOV1.sol"}),", with a\nmapping of proposals before we consider the OPL differences."]}),"\n",(0,n.jsx)(o.h2,{id:"base-contract",children:"Base Contract"}),"\n",(0,n.jsxs)(o.p,{children:["Inside your ",(0,n.jsx)(o.code,{children:"contracts/"})," directory, create a ",(0,n.jsx)(o.code,{children:"DAOV1.sol"})," file. You may have\nalready deployed a similar contract to your home network such as BNB or\nPolygon."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-solidity",children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {EnumerableSet} from "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";\n\ntype ProposalId is bytes32;\n\nstruct ProposalParams {\n    string ipfsHash;\n    uint16 numChoices;\n    bool publishVotes;\n}\n\ncontract DAOV1 {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    error AlreadyExists();\n    error NoChoices();\n    error TooManyChoices();\n\n    event ProposalClosed(ProposalId id, uint256 topChoice);\n\n    struct Proposal {\n        bool active;\n        uint16 topChoice;\n        ProposalParams params;\n    }\n\n    struct ProposalWithId {\n        ProposalId id;\n        Proposal proposal;\n    }\n\n    mapping(ProposalId => Proposal) public proposals;\n    EnumerableSet.Bytes32Set private activeProposals;\n    ProposalId[] private pastProposals;\n\n    constructor() {}\n\n    function createProposal(ProposalParams calldata _params) external payable returns (ProposalId) {\n        bytes32 proposalHash = keccak256(abi.encode(msg.sender, _params));\n        ProposalId proposalId = ProposalId.wrap(proposalHash);\n        if (_params.numChoices == 0) revert NoChoices();\n        if (_params.numChoices > type(uint16).max) revert TooManyChoices();\n        if (proposals[proposalId].active) revert AlreadyExists();\n        Proposal storage proposal = proposals[proposalId];\n        proposal.params = _params;\n        proposal.active = true;\n        activeProposals.add(proposalHash);\n        return proposalId;\n    }\n\n    function getActiveProposals(\n        uint256 _offset,\n        uint256 _count\n    ) external view returns (ProposalWithId[] memory _proposals) {\n        if (_offset + _count > activeProposals.length()) {\n            _count = activeProposals.length() - _offset;\n        }\n        _proposals = new ProposalWithId[](_count);\n        for (uint256 i; i < _count; ++i) {\n            ProposalId id = ProposalId.wrap(activeProposals.at(_offset + i));\n            _proposals[i] = ProposalWithId({id: id, proposal: proposals[id]});\n        }\n    }\n\n    function getPastProposals(\n        uint256 _offset,\n        uint256 _count\n    ) external view returns (ProposalWithId[] memory _proposals) {\n        if (_offset + _count > pastProposals.length) {\n            _count = pastProposals.length - _offset;\n        }\n        _proposals = new ProposalWithId[](_count);\n        for (uint256 i; i < _count; ++i) {\n            ProposalId id = pastProposals[_offset + i];\n            _proposals[i] = ProposalWithId({id: id, proposal: proposals[id]});\n        }\n    }\n}\n'})}),"\n",(0,n.jsxs)(o.p,{children:["Instead of storing complete ballot proposals on the network, we will use\n",(0,n.jsx)(o.a,{href:"https://ipfs.tech",children:"IPFS"}),". Our smart contract will refer to a pinned\n",(0,n.jsx)(o.a,{href:"https://docs.ipfs.tech/concepts/lifecycle/#_1-content-addressable-representation",children:"IPFS file"})," by its ",(0,n.jsx)(o.a,{href:"https://docs.ipfs.tech/concepts/hashing/",children:"hash"}),"."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-solidity",children:"struct ProposalParams {\n    string ipfsHash;\n    uint16 numChoices;\n    bool publishVotes;\n}\n"})}),"\n",(0,n.jsxs)(o.p,{children:["Our very simple DAO contract creates proposals and manages them, allowing\nboth active and past proposals to be queried externally through methods\n",(0,n.jsx)(o.code,{children:"getActiveProposals"})," and ",(0,n.jsx)(o.code,{children:"getPastProposals"}),". This would be sufficient on a\nsingle chain, and it is possible to develop confidential applications without\nbridges, relying solely on ",(0,n.jsx)(o.a,{href:"/dapp/sapphire/",children:"Sapphire"}),". However, we will proceed\nto demonstrate the cross-chain capabilities of OPL."]}),"\n",(0,n.jsx)(o.h2,{id:"what-is-different-with-opl",children:"What is different with OPL?"}),"\n",(0,n.jsxs)(o.p,{children:["OPL leverages ",(0,n.jsx)(o.a,{href:"https://celer.network",children:"Celer"}),"'s inter-chain ",(0,n.jsx)(o.a,{href:"https://im-docs.celer.network/developer/celer-im-overview",children:"messaging"}),"\ncapabilities in order to connect smart contracts deployed on a home network\nsuch as Polygon, or BNB, with the privacy preserving smart contracts deployed\non Sapphire."]}),"\n",(0,n.jsxs)(o.p,{children:["You will not need to learn how Celer Inter-chain Message (IM) works in order to\nuse OPL, but if you would like to learn more, you can see that OPL realizes\nthe Celer IM interface through the abstraction of an ",(0,n.jsx)(o.a,{href:"https://github.com/oasisprotocol/sapphire-paratime/blob/9a74e57e72b06ba86ec8454062b8c0a5281edb97/contracts/contracts/opl/Endpoint.sol#L35-L45",children:"Endpoint"}),":"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-solidity",children:"interface ICelerMessageBus {\n    function feeBase() external view returns (uint256);\n\n    function feePerByte() external view returns (uint256);\n\n    function sendMessage(\n        address _host,\n        uint256 _hostChainId,\n        bytes calldata _message\n    ) external payable;\n}\n"})}),"\n",(0,n.jsxs)(o.p,{children:["which allows us to use this bridge ",(0,n.jsx)(o.a,{href:"https://im-docs.celer.network/developer/development-guide/contract-framework#send-message",children:"function"}),":"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-solidity",children:"function sendMessage(\n    address _receiver,\n    uint64 _dstChainId,\n    bytes memory _message,\n    uint256 _fee\n) internal\n"})}),"\n",(0,n.jsxs)(o.p,{children:["In production, you can see the deployed ",(0,n.jsx)(o.a,{href:"https://explorer.sapphire.oasis.io/address/0x9B36f165baB9ebe611d491180418d8De4b8f3a1f/transactions",children:"cBridge contract"})," and\n",(0,n.jsx)(o.a,{href:"https://explorer.sapphire.oasis.io/address/0x9Bb46D5100d2Db4608112026951c9C965b233f4D/transactions",children:"MessageBus contract"}),"."]}),"\n",(0,n.jsx)(o.h3,{id:"how-does-opl-do-this",children:"How does OPL do this?"}),"\n",(0,n.jsxs)(o.p,{children:["We can ",(0,n.jsx)(o.a,{href:"https://github.com/oasisprotocol/sapphire-paratime/blob/9a74e57e72b06ba86ec8454062b8c0a5281edb97/contracts/contracts/opl/Endpoint.sol#L76-L84",children:"register"})," functions with endpoints in order to simplify our code.\nEndpoints are effectively callbacks which listen to messages from the enclaved\nsmart contract."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-solidity",children:"function registerEndpoint(\n    bytes memory _method,\n    function(bytes calldata) returns (Result) _cb\n) internal {\n    // This is a waste of an SLOAD, but the alternative before immutable arrays\n    // (https://github.com/ethereum/solidity/issues/12587) land is terribly verbose.\n    // This can be fixed once gas usage becomes a problem.\n    endpoints[bytes4(keccak256(_method))] = _cb;\n}\n"})}),"\n",(0,n.jsxs)(o.p,{children:["Under the hood, a ",(0,n.jsx)(o.code,{children:"postMessage"})," function ",(0,n.jsx)(o.a,{href:"https://github.com/oasisprotocol/sapphire-paratime/blob/9a74e57e72b06ba86ec8454062b8c0a5281edb97/contracts/contracts/opl/Endpoint.sol#L91-L119",children:"sends"})," the message using the Celer\nMessage Bus. If you would prefer using a different bridging partner, this\npattern will provide you a place to start that integration."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-solidity",children:"    ICelerMessageBus(messageBus).sendMessage{value: fee}(\n        remote,\n        remoteChainId,\n        envelope\n    );\n"})}),"\n",(0,n.jsx)(o.h3,{id:"endpoints-why-not-solidity-events",children:"Endpoints? Why not Solidity events?"}),"\n",(0,n.jsxs)(o.p,{children:["Events in Solidity are non-confidential and do not allow cross-chain\ncommunication. For this reason, OPL uses ",(0,n.jsx)(o.em,{children:"endpoints"})," for passing messages\ncross-chain. For example, this function below will listen to such a message and\nclose the proposal."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-solidity",children:"    function _oplBallotClosed(bytes calldata _args) internal returns (Result) {\n        (ProposalId proposalId, uint16 topChoice) = abi.decode(_args, (ProposalId, uint16));\n        proposals[proposalId].topChoice = topChoice;\n        proposals[proposalId].active = false;\n        activeProposals.remove(ProposalId.unwrap(proposalId));\n        pastProposals.push(proposalId);\n        emit ProposalClosed(proposalId, topChoice);\n        return Result.Success;\n    }\n"})}),"\n",(0,n.jsx)(o.h3,{id:"lets-see-the-code",children:"Let's see the code"}),"\n",(0,n.jsxs)(o.p,{children:["Let's see OPL at work. We can add our own implementation of event handling to\nprocess cross-chain messages. Let's make the following changes to ",(0,n.jsx)(o.code,{children:"DAOV1.sol"}),"."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-diff",children:'diff --git a/backend/contracts/DAOV1.sol b/backend/contracts/DAOV1.sol\nindex 21ea93e..827d80a 100644\n--- a/backend/contracts/DAOV1.sol\n+++ b/backend/contracts/DAOV1.sol\n@@ -1,6 +1,7 @@\n // SPDX-License-Identifier: MIT\n pragma solidity ^0.8.0;\n \n+import {Host, Result} from "@oasisprotocol/sapphire-contracts/contracts/OPL.sol";\n import {EnumerableSet} from "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";\n \n type ProposalId is bytes32;\n@@ -11,7 +12,7 @@ struct ProposalParams {\n     bool publishVotes;\n }\n\n-contract DAOV1 {\n+contract DAOV1 is Host {\n     using EnumerableSet for EnumerableSet.Bytes32Set;\n \n     error AlreadyExists();\n@@ -35,7 +36,9 @@ contract DAOV1 {\n     EnumerableSet.Bytes32Set private activeProposals;\n     ProposalId[] private pastProposals;\n \n-    constructor() {}\n+    constructor(address _ballotBox) Host(_ballotBox) {\n+        registerEndpoint("ballotClosed", _oplBallotClosed);\n+    }\n \n     function createProposal(ProposalParams calldata _params) external payable returns (ProposalId) {\n         bytes32 proposalHash = keccak256(abi.encode(msg.sender, _params));\n@@ -47,6 +50,7 @@ contract DAOV1 {\n         proposal.params = _params;\n         proposal.active = true;\n         activeProposals.add(proposalHash);\n+        postMessage("createBallot", abi.encode(proposalId, _params));\n         return proposalId;\n     }\n \n@@ -77,4 +81,14 @@ contract DAOV1 {\n             _proposals[i] = ProposalWithId({id: id, proposal: proposals[id]});\n         }\n     }\n+\n+    function _oplBallotClosed(bytes calldata _args) internal returns (Result) {\n+        (ProposalId proposalId, uint16 topChoice) = abi.decode(_args, (ProposalId, uint16));\n+        proposals[proposalId].topChoice = topChoice;\n+        proposals[proposalId].active = false;\n+        activeProposals.remove(ProposalId.unwrap(proposalId));\n+        pastProposals.push(proposalId);\n+        emit ProposalClosed(proposalId, topChoice);\n+        return Result.Success;\n+    }\n }\n'})}),"\n",(0,n.jsx)(o.h4,{id:"host",children:"Host"}),"\n",(0,n.jsxs)(o.p,{children:["A ",(0,n.jsx)(o.em,{children:"host"})," contract in our terminology is just a smart contract that extends the\n",(0,n.jsx)(o.code,{children:"Host"})," contract ",(0,n.jsx)(o.a,{href:"https://github.com/oasisprotocol/sapphire-paratime/blob/main/contracts/contracts/opl/Host.sol",children:"provided"})," and deployed on a home network such as BNB or\nPolygon with a reference to the Sapphire network where our ",(0,n.jsx)(o.em,{children:"enclave"}),"\n(privacy-preserving) smart contract will reside."]}),"\n",(0,n.jsx)(o.h4,{id:"constructor",children:"Constructor"}),"\n",(0,n.jsxs)(o.p,{children:["We provide the address of the confidential (also known as ",(0,n.jsx)(o.em,{children:"enclave"}),") smart\ncontract deployed on the Oasis Sapphire as a constructor parameter to the\n",(0,n.jsx)(o.em,{children:"host"})," smart contract."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-solidity",children:'    constructor(address _ballotBox) Host(_ballotBox) {\n        registerEndpoint("ballotClosed", _oplBallotClosed);\n    }\n'})})]})}function d(e={}){const{wrapper:o}={...(0,t.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},8453:(e,o,s)=>{s.d(o,{R:()=>r,x:()=>i});var n=s(6540);const t={},a=n.createContext(t);function r(e){const o=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),n.createElement(a.Provider,{value:o},e.children)}}}]);